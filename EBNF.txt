program     -> declaration program | definition program  | main

declaration -> INT ID | INT assignment | LONG ID | LONG assignment
            | UINT ID | UINT assignment | CHAR ID | CHAR assignment
            | STRING ID | STRING assignment | FLOAT ID | FLOAT assignment
            | DOUBLE ID | DOUBLE assignment

assignment -> ID ARROW nexp | ID ARROW STR | ID ARROW SCAN

nexp -> INT_N | FLO_N | ID | call | - nexp nexp | + nexp nexp
        | * nexp nexp | / nexp nexp | % nexp nexp | + + ID | - - ID

bexp -> TRUE | FALSE | ID | call | = bexp bexp | & bexp bexp | OR bexp bexp
   | = nexp nexp | < nexp nexp | > nexp nexp | < = nexp nexp | > = nexp nexp | ! bexp

definition -> signature ARROW arguments { code }
signature -> FUNC ID : INT | FUNC ID : LONG | FUNC ID : UINT
            | FUNC ID : CHAR | FUNC ID : STRING
            | FUNC ID : FLOAT | FUNC ID : DOUBLE
            | FUNC ID : BOOL | FUNC ID : VOID

main -> main_sig ARROW arguments { code }
main_sig -> MAIN : INT | MAIN : LONG | MAIN : UINT
            | MAIN : CHAR | MAIN : STRING
            | MAIN : FLOAT | MAIN : DOUBLE
            | MAIN : BOOL | MAIN : VOID

arguments -> EPSILON | argument arguments

argument -> INT : ID | LONG : ID | UINT : ID | CHAR : ID
            | STRING : ID | FLOAT : ID | DOUBLE : ID

code -> declaration code | assignment code | nexp code 
        | WHILE bexp { code } code
        | IF bexp { code } ELSE { code } code
        | IF bexp  { code } code
        | call code
        | PRINT ( parameters ) code
        | RET parameter code
        | RET code
        | EXIT 
        | EPSILON

call -> ID ( parameters )
parameters -> EPSILON | parameter parameters
parameter -> nexp | bexp | STR

%%% parsing table as JSON %%%

[[0,"INT","ID","LONG","ARROW","STR","SCAN","INT_N","FLO_N","-","+","TRUE","FALSE","=","&","OR","{","}","FUNC",":","UINT","MAIN","CHAR","(",")","$"],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1,48,1,48,48,48,48,48,48,48,48,48,48,48,48,48,48,2,48,48,3,48,48,48,47],[0,5,47,7,48,48,48,47,47,47,47,48,48,48,48,48,48,48,47,48,48,47,48,48,48,48],[0,47,10,47,48,48,48,47,47,47,47,48,48,48,48,48,48,48,47,48,48,47,48,48,48,48],[0,47,14,47,48,47,48,11,12,15,16,47,47,47,47,47,48,48,47,48,48,47,48,48,47,48],[0,48,20,48,48,47,48,47,47,47,47,17,18,21,22,23,48,48,48,48,48,48,48,48,47,48],[0,47,48,47,48,48,48,48,48,48,48,48,48,48,48,48,48,48,24,48,48,47,48,48,48,48],[0,48,48,48,47,48,48,48,48,48,48,48,48,48,48,48,48,48,27,48,48,48,48,48,48,48],[0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,28,48,48,48,47],[0,48,48,48,47,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,31,48,48,48,48],[0,33,48,33,48,48,48,48,48,48,48,48,48,48,48,48,32,48,48,48,33,48,33,48,48,48],[0,34,48,35,48,48,48,48,48,48,48,48,48,48,48,48,47,48,48,48,36,48,37,48,48,48],[0,38,40,38,48,48,48,40,40,40,40,48,48,48,48,48,48,47,48,48,48,48,48,48,48,48],[0,47,41,47,48,47,48,47,47,47,47,47,47,47,47,47,48,48,47,48,48,47,48,48,47,48],[0,48,43,48,48,43,48,43,43,43,43,43,43,43,43,43,48,48,48,48,48,48,48,48,42,48],[0,48,45,48,48,46,48,44,44,44,44,45,45,45,45,45,48,48,48,48,48,48,48,48,47,48]] 

%%% parsing push-map as JSON %%%

{"1":[1,2],"2":[1,6],"3":[8],"4":[-2,-1],"5":[3,-1],"6":[-2,-3],"7":[3,-3],"8":[4,-4,-2],"9":[-5,-4,-2],"10":[-6,-4,-2],"11":[-7],"12":[-8],"13":[-2],"14":[13],"15":[4,4,-9],"16":[4,4,-10],"17":[-11],"18":[-12],"19":[-2],"20":[13],"21":[5,5,-13],"22":[5,5,-14],"23":[5,5,-15],"24":[-17,12,-16,10,-4,7],"25":[-1,-19,-2,-18],"26":[-3,-19,-2,-18],"27":[-20,-19,-2,-18],"28":[-17,12,-16,10,-4,9],"29":[-1,-19,-21],"30":[-3,-19,-21],"31":[-20,-19,-21],"33":[10,11],"34":[-2,-19,-1],"35":[-2,-19,-3],"36":[-2,-19,-20],"37":[-2,-19,-22],"38":[12,2],"39":[12,3],"40":[12,4],"41":[-24,14,-23,-2],"43":[14,15],"44":[4],"45":[5],"46":[-5]} 
